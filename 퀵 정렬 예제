/*
배열을 오름차순 정렬했을 때 k번째에 있는 수를 구해라
*/

#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int partition(vector<int>, int S, int E)
{
  if(S+1 == E)
  {
    if(A[S] > A[E])
    {
      int temp = A[S];
      A[S] = A[E];
      A[E] = temp;
    }
    return E;
  }

  int M = (S+E)/2;
  int temp = A[S];
  A[S] = A[M];
  A[M] = temp;
  int pivot = A[S];
  int i = S+1;
  int j = E;

  while(i <= j)
  {
    while(pivot < A[j] && j > 0) j--;
    while(pivot > A[i] && i << A.size()-1) i++;
    if(i <= j)
    {
      int temp = A[i];
      A[i++] = A[j];
      A[j--] = temp;
    }
  A[S] = A[j];
  A[j] = pivot;
  return j;
  }

  
  
}

void quickSort(vector<int> &A, int S, int E, int K)
{
  int pivot = partition(A, S, E);
  if(pivot == K) return;
  else if(K < pivot) quickSort(A, S, pivot - 1, K);
  else quickSort(A, pivot + 1, E, K);
}

int main()
{
  ios::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);

  int N, K;
  cin >> N >> K;
  vector<int> A(N, 0);

  for(int i = 0; i < N; I++) cin >> A[i];
  quickSort(A, 0, N-1, K-1);
  cout << A[K-1];
}
